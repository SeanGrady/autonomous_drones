On the way querying for GPS-located air sensor reads works:
    NOTE: the way this query is set up, it will only return air sensor
    records that can be 'matched' with GPS sensor reading, where matched
    means that there is at least one GPS sensor reading that took place
    in the same unix era second, which is NOT the same as 'within one
    second'. It's therefor advisable to have the drones take air sensor
    readings at a frequency greater than once per second, or alternately
    have some other way to match GPS readings. You could easily pull all
    air sensor readings and all GPS readings and then do some post-
    processing to match them up (look for the GPS reading closest in time,
    for example), but this way is adequate for now and much cleaner.

clean data in base_station (and possibly elsewhere, like matlab plotting)
is terrible and needs to be refactored

describe the context manager for database access (scoped_session)

note that Michael should document MissionGenerator

say that acquire_sensor_records in LoggerDaemon should probably work in a way
such that there can be more than one of each type of sensor per drone.

cover the simulator (dronekit-sitl python) since it's not covered in the
docstrings

self.groundspeed seems to do nothing? WPNAV_SPEED seems to work but not when
the drone is wrong about its location (It's probably the speed the guided mode
waypoint moves at)

mention the common things we use from dronekit's API (location objects, vehicle
etc), explain NED

Explain the mission system

Mention that the sensors should be entered into the sensors table, not just the
dummy entries I have now.

On the SensorRead table black magic
    This is an example of something that the sqlalchemy docs refer to as
    'joined table inheritance' and is in general known as polymorphism. This
    table is sort of like an aggregator for the other sensor reads tables, in
    effect functioning like a table where each row is allowed to have different
    columns. All the columns common to all the joined tables are defined here
    in this parent class, and columns specific to each type of joined table are
    defined in their own models (like AirSensorReads or GPSSensorReads).

    The other thing that goes on in this table is the 'mission' and 'drone'
    relationships. These are also sort of deep magic, but the idea is that when
    you query the database from python, as shown in the other scripts like the
    base station, you get a bunch of python objects where the attributes are
    the database columns. The sqlalchemy ORM is there to facilitate things like
    calling a sensor record and then just doing record.drone.name to find the
    name of the drone the reading was taken by. This usually happens on its own
    but when, as in this case, finding the requisite data requires hopping
    accross multiple association tables of association tables, sqlalchemy needs
    some help.
